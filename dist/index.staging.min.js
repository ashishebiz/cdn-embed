"use strict";
var AgeVerificationCDN = (() => {
  var l = (e, n, t) =>
    new Promise((i, a) => {
      var p = (c) => {
          try {
            d(t.next(c));
          } catch (f) {
            a(f);
          }
        },
        s = (c) => {
          try {
            d(t.throw(c));
          } catch (f) {
            a(f);
          }
        },
        d = (c) => (c.done ? i(c.value) : Promise.resolve(c.value).then(p, s));
      d((t = t.apply(e, n)).next());
    });
  var S = "http://localhost:8888",
    E = "/rule-engine/v1/age-app-embedded/generate-qr",
    h = "/rule-engine/v1/age-app-embedded/get-qr";
  var y = 5e3,
    g = 1e4,
    r = {
      WaitingForScan: "WaitingForScan",
      Timeout: "Timeout",
      Scanned: "Scanned",
      Approved: "Approved",
      RejectedByUser: "RejectedByUser",
      RejectedByRequirement: "RejectedByRequirement",
      SomethingWentWrong: "SomethingWentWrong",
    };
  function R(t) {
    return l(this, arguments, function* (e, n = {}) {
      return (yield fetch(e, { method: "GET", headers: n })).json();
    });
  }
  var T = (e) => document.querySelector(e);
  function L(e, n) {
    if (!e) return;
    let t = document.createElement("div");
    (t.innerText = JSON.stringify(n, null, 2)), e.prepend(t);
  }
  var x = (...e) => console.log("[cdn-embed]", ...e),
    v = (...e) => console.error("[cdn-embed]", ...e);
  var u = (e, n) => {
      setTimeout(() => {
        window.location.href = e;
      }, n);
    },
    A = () => {
      let e = document.currentScript;
      return {
        apiKey: (e == null ? void 0 : e.dataset.apiKey) || "",
        successURL: (e == null ? void 0 : e.dataset.successUrl) || "",
        failureURL: (e == null ? void 0 : e.dataset.failureUrl) || "",
        notificationURL: (e == null ? void 0 : e.dataset.notificationUrl) || "",
      };
    };
  var m = class {
    constructor() {
      this.pollingId = null;
    }
    configure(n) {
      this.options = n;
    }
    displayQRCode(n, t) {
      var a;
      let i = T(this.options.qrContainerSelector);
      if (!i) {
        v("QR Container not found");
        return;
      }
      (i.innerHTML = `<div id="qr-code" class="w-100 h-100" style="cursor:pointer;text-align:center;">
      <img src="${n}" alt="QR Code" style="width:100%;height:100%;" /></div>`),
        (a = document.getElementById("qr-code")) == null || a.addEventListener("click", () => window.open(t, "_blank"));
    }
    startPolling(n) {
      this.pollingId && clearInterval(this.pollingId),
        (this.pollingId = window.setInterval(
          () =>
            l(this, null, function* () {
              try {
                let t = `${S}${h}/${n}`,
                  i = yield R(t, { "x-sign-key": this.options.apiKey });
                L(T(this.options.logContainerSelector || ""), i.scanningState), i != null && i.scanningState && this.handleState(i.scanningState);
              } catch (t) {
                v("Polling error", t), this.handleState(r.Timeout);
              }
            }),
          y,
        ));
    }
    handleState(n) {
      let t = this.options;
      switch (n) {
        case r.WaitingForScan:
          return t.onVerificationWaitingForScan();
        case r.Scanned:
          return t.onVerificationScanning();
        case r.Approved:
          return t.onVerificationSuccess();
        case r.RejectedByUser:
          return t.onVerificationRejectedByUser();
        case r.RejectedByRequirement:
          return t.onVerificationRejectedByRequirements();
        case r.Timeout:
          return t.onVerificationTimeout();
        default:
          return t.onVerificationFailure();
      }
    }
    generateQRCode() {
      return l(this, null, function* () {
        let n = "/e42cb048-4a64-4826-af03-5e7eb3a9fa9c";
        try {
          let t = `${S}${E}/${n}`,
            i = yield R(t, { "x-sign-key": this.options.apiKey });
          this.displayQRCode(i.qrCodeUrl, i.deepLink), this.startPolling(i.sessionId);
        } catch (t) {
          console.error("Failed to generate QR code:", t);
        }
      });
    }
  };
  var w = (e) =>
    ({
      Timeout: "<div class='message'>QR expired.</div><a id='new-qr-button' class='button secondary'>New QR</a>",
      Scanned: "<div class='spinner'></div><div class='message'>Scanning in progress...</div>",
      Approved: "<div class='checkmark'></div><div class='message'>Access granted in 10s.</div>",
      RejectedByUser: "<div class='cross'></div><div class='message denied'>Access Denied</div>",
      RejectedByRequirement: "<div class='cross'></div><div class='message denied'>Access Denied</div>",
      WaitingForScan: "<div class='spinner'></div><div class='message'>Waiting for scan...</div>",
      SomethingWentWrong: "<div class='cross'></div><div class='message denied'>Something went wrong</div>",
    }[e]);
  var o = (() => {
    let e = null,
      n,
      t = "",
      i = "";
    function a(s) {
      (e = document.querySelector(s.qrCodeSelector)),
        e && ((n = s.generateQRCodeFunction), (t = s.successRedirectURL || ""), (i = s.failRedirectURL || ""));
    }
    function p(s) {
      var c;
      if (!e) return;
      let d = w(s);
      (e.innerHTML = `<div class='w-100 h-100 align-content-center'>${d}</div>`),
        s === r.Timeout && n && ((c = document.getElementById("new-qr-button")) == null || c.addEventListener("click", n)),
        s === r.Approved && t && u(t, g),
        (s === r.RejectedByUser || s === r.RejectedByRequirement) && i && u(i, g),
        s === r.SomethingWentWrong && i && u(i, g);
    }
    return { setOptions: a, handleState: p, STATES: r };
  })();
  (() => {
    let { apiKey: e, successURL: n, failureURL: t, notificationURL: i } = A();
    if ((x({ apiKey: e, successURL: n, failureURL: t, notificationURL: i }), !e)) return console.error("Missing apiKey");
    let a = new m();
    a.configure({
      apiKey: e,
      qrContainerSelector: "#embed-qr-code",
      logContainerSelector: "#embed-qr-code-logs",
      onVerificationWaitingForScan: () => o.handleState(o.STATES.WaitingForScan),
      onVerificationSuccess: () => o.handleState(o.STATES.Approved),
      onVerificationFailure: () => o.handleState(o.STATES.Timeout),
      onVerificationScanning: () => o.handleState(o.STATES.Scanned),
      onVerificationRejectedByUser: () => o.handleState(o.STATES.RejectedByUser),
      onVerificationRejectedByRequirements: () => o.handleState(o.STATES.RejectedByRequirement),
      onVerificationTimeout: () => o.handleState(o.STATES.Timeout),
    }),
      a.generateQRCode(),
      o.setOptions({
        qrCodeSelector: "#embed-qr-code-qr",
        generateQRCodeFunction: () => a.generateQRCode(),
        successRedirectURL: n,
        failRedirectURL: t,
      });
  })();
})();
